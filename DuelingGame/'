#pragma once
#ifndef GRID_H
#define GRID_H
#include <map>
#include <list>
#include "raylib.h"
#include <memory>
#include "GameObject.h"


class Cell;
class GridItem;
class Grid;
class GridMemory;

#define MAX_CELLS 100

struct Coordinate
{
	int x;
	int y;

	bool operator==(const Coordinate& other) const
	{
		return this->x == other.x && this->y == other.y;
	}

	bool operator<(const Coordinate& other) const
	{
        return x < other.x || (x == other.x && y < other.y);
    }

};


class Grid final
{
public:
	Grid();
	~Grid();
	static Cell& GetCell(Coordinate coord);
	static std::unique_ptr<Cell> grid;
private:
	Cell* memory;
	static std::map<Coordinate, int> gridMap;

}; 

class Cell final
{
public:
	void AddItem(GridItem& item);
	void RemoveItem(GridItem& item);
	void DrawCell(); // have a flag for grid items to determine if they are to be drawn

private:
	Cell();
	Cell(int x, int y);
	Cell(Coordinate coord);
	~Cell();
	Coordinate position;
	std::list<GridItem*> items;
	friend Grid;
};

/*
I could mke it so that each grid item has it's own unique ptr
that way there is no doubling of items
*/
class GridItem
{
	GridItem(Coordinate coord, GameResource* res);
	void DrawItem();
	void Move(Coordinate coord);
	Coordinate GetPosition() { return position; }
private:
	~GridItem();
	Coordinate position;
    GameResource* resource;
	const std::unique_ptr<GridItem> ptr;
	friend Cell;

};

/*

class GridMemory final
{ 
private:
	GridMemory();
	~GridMemory();
	Cell* gridMemory;
	friend Grid;
};


class Grid final
{
public:
	Cell* GetCell(Coordinate coordinate);
	void MoveGridItem(GridItem* item, Coordinate coord);
	void AddToGrid(GridItem* item, Coordinate coord);
	Grid();
	~Grid();
private:
	Cell CreateCell(int x, int y);
	void FillMemory(Cell* memory);
	Cell* grid;
	GridMemory memory;
	std::map<Coordinate, int> map;
};



// composite

class Cell final
{
public:
	Cell();
	~Cell();

	void AddItem(GridItem* item);
	void RemoveItem(GridItem* item);
	void DrawCell(); // grid items should have a "draw flag" to signify what should and shouldn't be drawn
	Coordinate GetPosition() { return position; }
private:
	Coordinate position;
	Cell(int x, int y);
	std::list<GridItem*> componenets;
	friend Grid;
};

// componenet
class GridItem
{
public:
	~GridItem();

	Coordinate GetGridPos();
	Vector2 GetWorldPos();
	void DrawItem();

protected:
	GridItem(GameResource* res);
	GridItem();
	GameResource* resource;

private: 
	Coordinate coord;
	friend Cell;
	friend Grid;
};
 
class Tile : public GridItem
{ 
public:
	~Tile();
	Tile();
	Tile(GameResource* res);
	// need to override the move func
	//void Move(Vector2 dir);
};
*/
 
#endif
